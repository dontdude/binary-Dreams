import React, { useEffect, useState } from 'react';

import { Card, FormField, Loader } from '../components';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return (          //similar to: <Card key={post._id} title={post.title} description={post.description} date={post.date} />
      data.map((post) => <Card key={post._id} {...post} />)
    );
  }

  return (
    // case of : No related post found
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);           // helps to prevent too many searches from being performed in quick succession, which could slow down the application.
  const [searchedResults, setSearchedResults] = useState(null);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('http://localhost:8080/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());              // storing all post from api in reverse order
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  // fetchPosts will only run on the first render of the component, since wrapped with useEffect
  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    // The clearTimeout() function is used to clear any previously set timeout(or stop ongoing search) whenever a new search is performed, so that only the latest search result is displayed.
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    // The setSearchTimeout state variable is used to store a *reference* to the search timeout created by the setTimeout() function. The purpose of this is to allow the timeout to be cleared using the clearTimeout() function whenever a new search is performed.
    setSearchTimeout(
      // When the timeout is triggered, after 500 milliseconds the function uses the filter() method to search for items in the allPosts array that have either the name property or the prompt property that contains the searchText, 
      // The filtered results are then stored in the searchResult state variable.
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
        setSearchedResults(searchResult);
      }, 500),
    );
    // By using a timeout, the search is performed only after the user has stopped typing for 500 milliseconds.
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        {/* <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1> */}
        <h2 className="font-extrabold text-[#222328] text-[32px]">When did AI started dreaming?</h2>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[600px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing Resuls for <span className="text-[#222328]">{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults}            // passing array of searched post as data
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards
                  data={allPosts}
                  title="No Posts Yet"
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;